#!/usr/bin/env python3
"""
Test script cho Rule-based Physics Question Classifier.

Script n√†y ki·ªÉm tra:
- Kh·∫£ nƒÉng ph√¢n lo·∫°i c√¢u h·ªèi v·∫≠t l√Ω b·∫±ng rule-based approach
- T√≠nh ch√≠nh x√°c c·ªßa c√°c rules
- X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p edge case

Author: Physics Problem Solving System Team
Version: 3.0.0 - Rule-based Approach
"""

def classify_physics_question(question: str) -> str:
    """
    Ph√¢n lo·∫°i c√¢u h·ªèi v·∫≠t l√Ω d·ª±a tr√™n rules c·∫£i ti·∫øn.

    Args:
        question: C√¢u h·ªèi c·∫ßn ph√¢n lo·∫°i

    Returns:
        str: Lo·∫°i c√¢u h·ªèi (THEORY, PRACTICE, MULTIPLE_CHOICE)
    """
    if not question or not question.strip():
        return "THEORY"

    question_clean = question.strip()
    question_lower = question_clean.lower()

    # Priority 1: Check for multiple choice (highest priority)
    multiple_choice_patterns = [
        'a)', 'b)', 'c)', 'd)',
        'A)', 'B)', 'C)', 'D)',
        'a.', 'b.', 'c.', 'd.',
        'A.', 'B.', 'C.', 'D.'
    ]
    if any(pattern in question_clean for pattern in multiple_choice_patterns):
        return "MULTIPLE_CHOICE"

    # Priority 2: Check for theory keywords FIRST (before practice)
    theory_keywords = [
        'l√† g√¨', 'ƒë·ªãnh nghƒ©a', 'kh√°i ni·ªám', 'gi·∫£i th√≠ch', 'm√¥ t·∫£', 'n√™u', 'tr√¨nh b√†y',
        'ƒë·ªãnh lu·∫≠t', 'nguy√™n l√Ω', 'hi·ªán t∆∞·ª£ng', 'b·∫£n ch·∫•t', 'ƒë·∫∑c ƒëi·ªÉm', 't√≠nh ch·∫•t',
        'ph√¢n lo·∫°i', 'so s√°nh', 'ph√¢n bi·ªát', '·ª©ng d·ª•ng', 'vai tr√≤', '√Ω nghƒ©a',
        't·∫°i sao', 'v√¨ sao', 'nh∆∞ th·∫ø n√†o', 'ra sao'
    ]

    # Strong theory indicators - if found, return THEORY immediately
    if any(keyword in question_lower for keyword in theory_keywords):
        return "THEORY"

    # Priority 3: Check for calculation/practice keywords
    # Only strong calculation verbs
    calc_verbs = ['t√≠nh', 't√¨m', 'x√°c ƒë·ªãnh', 't√≠nh to√°n', 'gi·∫£i', 'suy ra']

    # Units and measurements (more specific)
    units = ['kg', 'm/s', 'm/s¬≤', 'newton', 'joule', 'watt', 'volt', 'ampere', 'ohm',
             'n', 'j', 'w', 'v', 'a', 'œâ', 'pa', 'hz']

    # Mathematical symbols and expressions
    math_symbols = ['=', '+', '-', '√ó', '√∑', '¬≤', '¬≥', '‚àö']

    # Strong calculation context
    calc_context = ['v·ªõi', 'khi', 'r∆°i', 'n√©m', 'dao ƒë·ªông', 'va ch·∫°m']

    # Numerical patterns
    import re
    has_numbers_with_units = bool(re.search(r'\d+\s*(kg|m/s|m/s¬≤|n|j|w|v|a)', question_lower))
    has_formula = bool(re.search(r'[a-zA-Z]\s*=\s*[a-zA-Z]', question_clean))
    has_calculation = bool(re.search(r'\d+\s*[+\-√ó√∑]\s*\d+', question_clean))

    # Check for practice indicators with stricter rules
    practice_score = 0

    # Very strong indicators (worth 3 points each)
    if any(verb in question_lower for verb in calc_verbs):
        practice_score += 3
    if has_formula:
        practice_score += 3
    if has_numbers_with_units:
        practice_score += 3
    if has_calculation:
        practice_score += 3

    # Medium indicators (worth 1 point each)
    if any(unit in question_lower for unit in units):
        practice_score += 1
    if any(symbol in question_clean for symbol in math_symbols):
        practice_score += 1
    if any(context in question_lower for context in calc_context):
        practice_score += 1

    # Only classify as PRACTICE if score >= 3 (stricter threshold)
    if practice_score >= 3:
        return "PRACTICE"

    # Default: if no clear indicators, classify as THEORY
    return "THEORY"

def test_rule_based_classification():
    """
    Test function ƒë·ªÉ ki·ªÉm tra ph√¢n lo·∫°i c√¢u h·ªèi v·ªõi rule-based approach.
    """
    print("üìè B·∫Øt ƒë·∫ßu test ph√¢n lo·∫°i c√¢u h·ªèi v·ªõi Rule-based Classifier...")
    print("=" * 70)

    # Test cases v·ªõi c√°c lo·∫°i c√¢u h·ªèi kh√°c nhau
    test_cases = [
        # THEORY questions
        {
            "question": "ƒê·ªãnh lu·∫≠t Newton th·ª© nh·∫•t l√† g√¨?",
            "expected": "THEORY",
            "description": "C√¢u h·ªèi l√Ω thuy·∫øt v·ªÅ ƒë·ªãnh lu·∫≠t"
        },
        {
            "question": "Gi·∫£i th√≠ch hi·ªán t∆∞·ª£ng kh√∫c x·∫° √°nh s√°ng",
            "expected": "THEORY",
            "description": "C√¢u h·ªèi gi·∫£i th√≠ch hi·ªán t∆∞·ª£ng"
        },
        {
            "question": "ƒê·ªông nƒÉng l√† g√¨?",
            "expected": "THEORY",
            "description": "C√¢u h·ªèi v·ªÅ kh√°i ni·ªám"
        },
        {
            "question": "Th·∫ø nƒÉng tr·ªçng tr∆∞·ªùng l√† g√¨?",
            "expected": "THEORY",
            "description": "C√¢u h·ªèi v·ªÅ ƒë·ªãnh nghƒ©a"
        },
        {
            "question": "ƒê·ªãnh lu·∫≠t b·∫£o to√†n nƒÉng l∆∞·ª£ng n√≥i g√¨?",
            "expected": "THEORY",
            "description": "C√¢u h·ªèi v·ªÅ ƒë·ªãnh lu·∫≠t"
        },
        {
            "question": "L·ª±c ma s√°t l√† g√¨?",
            "expected": "THEORY",
            "description": "C√¢u h·ªèi ƒë·ªãnh nghƒ©a v·ªõi 'l√† g√¨'"
        },
        {
            "question": "T·∫°i sao v·∫≠t r∆°i t·ª± do c√≥ gia t·ªëc kh√¥ng ƒë·ªïi?",
            "expected": "THEORY",
            "description": "C√¢u h·ªèi gi·∫£i th√≠ch v·ªõi 't·∫°i sao'"
        },

        # PRACTICE questions
        {
            "question": "T√≠nh l·ª±c t√°c d·ª•ng khi kh·ªëi l∆∞·ª£ng m=5kg v√† gia t·ªëc a=2m/s¬≤",
            "expected": "PRACTICE",
            "description": "B√†i t·∫≠p t√≠nh to√°n v·ªõi s·ªë li·ªáu"
        },
        {
            "question": "M·ªôt v·∫≠t c√≥ kh·ªëi l∆∞·ª£ng 10kg chuy·ªÉn ƒë·ªông v·ªõi v·∫≠n t·ªëc 5m/s. T√≠nh ƒë·ªông nƒÉng c·ªßa v·∫≠t",
            "expected": "PRACTICE",
            "description": "B√†i t·∫≠p t√≠nh ƒë·ªông nƒÉng"
        },
        {
            "question": "T√≠nh c√¥ng su·∫•t khi P=UI v·ªõi U=220V, I=2A",
            "expected": "PRACTICE",
            "description": "B√†i t·∫≠p t√≠nh c√¥ng su·∫•t"
        },
        {
            "question": "T√≠nh v·∫≠n t·ªëc khi s=100m, t=10s",
            "expected": "PRACTICE",
            "description": "B√†i t·∫≠p t√≠nh v·∫≠n t·ªëc"
        },
        {
            "question": "T√¨m gia t·ªëc khi v=20m/s, t=5s",
            "expected": "PRACTICE",
            "description": "B√†i t·∫≠p t√¨m gia t·ªëc"
        },
        {
            "question": "M·ªôt v·∫≠t c√≥ kh·ªëi l∆∞·ª£ng 2kg r∆°i t·ª´ ƒë·ªô cao 10m",
            "expected": "PRACTICE",
            "description": "B√†i t·∫≠p c√≥ t·ª´ kh√≥a 'c√≥'"
        },
        {
            "question": "X√°c ƒë·ªãnh v·∫≠n t·ªëc c·ªßa v·∫≠t khi t = 5s",
            "expected": "PRACTICE",
            "description": "B√†i t·∫≠p v·ªõi 'x√°c ƒë·ªãnh'"
        },
        {
            "question": "Gi·∫£i b√†i to√°n: F = ma v·ªõi m = 10kg",
            "expected": "PRACTICE",
            "description": "B√†i t·∫≠p v·ªõi 'gi·∫£i' v√† c√¥ng th·ª©c"
        },
        {
            "question": "T√≠nh to√°n c√¥ng su·∫•t ti√™u th·ª• P = UI",
            "expected": "PRACTICE",
            "description": "B√†i t·∫≠p v·ªõi 't√≠nh to√°n'"
        },

        # MULTIPLE_CHOICE questions
        {
            "question": "ƒê∆°n v·ªã c·ªßa l·ª±c l√†: A) kg B) m/s C) N D) J",
            "expected": "MULTIPLE_CHOICE",
            "description": "C√¢u h·ªèi tr·∫Øc nghi·ªám v·ªõi l·ª±a ch·ªçn"
        },
        {
            "question": "C√¥ng th·ª©c t√≠nh ƒë·ªông nƒÉng l√†: A) mgh B) 1/2mv¬≤ C) Ft D) ma",
            "expected": "MULTIPLE_CHOICE",
            "description": "Tr·∫Øc nghi·ªám v·ªÅ c√¥ng th·ª©c"
        },
        {
            "question": "ƒê∆°n v·ªã c·ªßa c√¥ng su·∫•t l√†: A) W B) J C) N D) kg",
            "expected": "MULTIPLE_CHOICE",
            "description": "Tr·∫Øc nghi·ªám v·ªÅ ƒë∆°n v·ªã"
        },
        {
            "question": "ƒê·ªãnh lu·∫≠t Ohm c√≥ d·∫°ng: A) P=UI B) F=ma C) U=IR D) E=mc¬≤",
            "expected": "MULTIPLE_CHOICE",
            "description": "Tr·∫Øc nghi·ªám v·ªÅ ƒë·ªãnh lu·∫≠t"
        },
        {
            "question": "V·∫≠n t·ªëc √°nh s√°ng trong ch√¢n kh√¥ng: a) 3√ó10‚Å∏ m/s b) 340 m/s c) 9.8 m/s¬≤ d) 1.6√ó10‚Åª¬π‚Åπ C",
            "expected": "MULTIPLE_CHOICE",
            "description": "Tr·∫Øc nghi·ªám v·ªõi a) b) c) d)"
        },

        # Tr∆∞·ªùng h·ª£p kh√≥ ph√¢n bi·ªát
        {
            "question": "T√≠nh l·ª±c F trong c√¥ng th·ª©c F=ma: A) 10N B) 20N C) 30N D) 40N",
            "expected": "MULTIPLE_CHOICE",
            "description": "C√≥ c·∫£ 't√≠nh' v√† l·ª±a ch·ªçn - ∆∞u ti√™n MULTIPLE_CHOICE"
        },
        {
            "question": "M·ªôt v·∫≠t kh·ªëi l∆∞·ª£ng 5kg. ƒê·ªông nƒÉng l√† g√¨?",
            "expected": "THEORY",
            "description": "C√≥ s·ªë li·ªáu nh∆∞ng h·ªèi ƒë·ªãnh nghƒ©a - ∆∞u ti√™n THEORY"
        },
        {
            "question": "Trong c√¥ng th·ª©c E=mc¬≤, c l√† g√¨?",
            "expected": "THEORY",
            "description": "C√≥ c√¥ng th·ª©c nh∆∞ng h·ªèi √Ω nghƒ©a - ∆∞u ti√™n THEORY"
        }
    ]

    correct_predictions = 0
    total_tests = len(test_cases)
    results_by_category = {"THEORY": {"correct": 0, "total": 0},
                          "PRACTICE": {"correct": 0, "total": 0},
                          "MULTIPLE_CHOICE": {"correct": 0, "total": 0}}

    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìù Test {i}/{total_tests}: {test_case['description']}")
        print(f"C√¢u h·ªèi: {test_case['question']}")
        print(f"K·∫øt qu·∫£ mong ƒë·ª£i: {test_case['expected']}")

        try:
            # Th·ª±c hi·ªán ph√¢n lo·∫°i
            result = classify_physics_question(test_case['question'])

            print(f"K·∫øt qu·∫£ th·ª±c t·∫ø: {result}")

            # C·∫≠p nh·∫≠t th·ªëng k√™ theo category
            expected_cat = test_case['expected']
            results_by_category[expected_cat]["total"] += 1

            # Ki·ªÉm tra k·∫øt qu·∫£
            if result == test_case['expected']:
                print("‚úÖ ƒê√öNG")
                correct_predictions += 1
                results_by_category[expected_cat]["correct"] += 1
            else:
                print("‚ùå SAI")

        except Exception as e:
            print(f"‚ùå L·ªñI: {str(e)}")
            results_by_category[test_case['expected']]["total"] += 1

    # T·ªïng k·∫øt
    print("\n" + "=" * 70)
    print("üìä K·∫æT QU·∫¢ T·ªîNG K·∫æT:")
    print(f"S·ªë test ƒë√∫ng: {correct_predictions}/{total_tests}")
    print(f"ƒê·ªô ch√≠nh x√°c t·ªïng th·ªÉ: {(correct_predictions/total_tests)*100:.1f}%")

    # Th·ªëng k√™ theo t·ª´ng lo·∫°i
    print("\nüìà TH·ªêNG K√ä THEO LO·∫†I:")
    for category, stats in results_by_category.items():
        if stats["total"] > 0:
            accuracy = (stats["correct"] / stats["total"]) * 100
            print(f"{category}: {stats['correct']}/{stats['total']} ({accuracy:.1f}%)")

    # ƒê√°nh gi√°
    if correct_predictions == total_tests:
        print("\nüéâ HO√ÄN H·∫¢O! T·∫§T C·∫¢ TEST CASES ƒê·ªÄU PASS!")
    elif correct_predictions >= total_tests * 0.9:
        print("\nüåü XU·∫§T S·∫ÆC! (>90% accuracy)")
    elif correct_predictions >= total_tests * 0.8:
        print("\n‚úÖ T·ªêT! (>80% accuracy)")
    elif correct_predictions >= total_tests * 0.7:
        print("\nüëç KH√Å T·ªêT! (>70% accuracy)")
    else:
        print("\n‚ö†Ô∏è C·∫¶N C·∫¢I THI·ªÜN! (<70% accuracy)")

def test_edge_cases():
    """
    Test c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
    """
    print("\nüß™ Test c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát:")
    print("-" * 50)

    edge_cases = [
        ("C√¢u h·ªèi r·ªóng", ""),
        ("Ch·ªâ c√≥ s·ªë", "123456789"),
        ("Kh√¥ng li√™n quan v·∫≠t l√Ω", "H√¥m nay th·ªùi ti·∫øt th·∫ø n√†o?"),
        ("C√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát", "C√¢u h·ªèi c√≥ @#$%^&*()"),
        ("Tr·∫Øc nghi·ªám vi·∫øt hoa", "ƒê∆†N V·ªä C·ª¶A L·ª∞C L√Ä: A) KG B) N C) M D) S"),
        ("C√≥ c·∫£ t·ª´ kh√≥a t√≠nh v√† A)", "T√≠nh l·ª±c: A) 10N B) 20N C) 30N D) 40N"),
        ("C√¢u d√†i", "Trong m·ªôt th√≠ nghi·ªám v·∫≠t l√Ω ph·ª©c t·∫°p, ch√∫ng ta c·∫ßn t√≠nh to√°n nhi·ªÅu ƒë·∫°i l∆∞·ª£ng kh√°c nhau"),
    ]

    for i, (description, case) in enumerate(edge_cases, 1):
        print(f"\nEdge case {i}: {description}")
        print(f"Input: {case[:50]}{'...' if len(case) > 50 else ''}")
        try:
            result = classify_physics_question(case)
            print(f"K·∫øt qu·∫£: {result}")
        except Exception as e:
            print(f"L·ªói: {str(e)}")

def test_single_question():
    """
    Test v·ªõi m·ªôt c√¢u h·ªèi ƒë∆°n l·∫ª ƒë·ªÉ debug.
    """
    print("\nüîç Test c√¢u h·ªèi ƒë∆°n l·∫ª:")
    print("-" * 50)

    question = input("Nh·∫≠p c√¢u h·ªèi c·∫ßn test: ")

    try:
        result = classify_physics_question(question)

        print(f"C√¢u h·ªèi: {question}")
        print(f"K·∫øt qu·∫£ ph√¢n lo·∫°i: {result}")

        # Hi·ªÉn th·ªã l√Ω do ph√¢n lo·∫°i
        question_lower = question.lower()
        if any(choice in question for choice in ['a)', 'b)', 'c)', 'd)', 'A)', 'B)', 'C)', 'D)']):
            print("L√Ω do: Ph√°t hi·ªán l·ª±a ch·ªçn A), B), C), D)")
        elif any(keyword in question_lower for keyword in ['t√≠nh', 't√¨m', 'kg', 'm/s', 'newton', 'joule', '=', 'v·ªõi', 'khi', 'c√≥', 'chuy·ªÉn ƒë·ªông']):
            print("L√Ω do: Ph√°t hi·ªán t·ª´ kh√≥a t√≠nh to√°n")
        else:
            print("L√Ω do: M·∫∑c ƒë·ªãnh l√† THEORY")

    except Exception as e:
        print(f"L·ªói: {str(e)}")

if __name__ == "__main__":
    print("üöÄ CH∆Ø∆†NG TR√åNH TEST RULE-BASED PHYSICS CLASSIFIER")
    print("=" * 70)

    # Ch·∫°y test t·ª± ƒë·ªông
    test_rule_based_classification()

    # Test edge cases
    test_edge_cases()

    # T√πy ch·ªçn test th·ªß c√¥ng
    while True:
        choice = input("\nB·∫°n c√≥ mu·ªën test c√¢u h·ªèi ri√™ng l·∫ª? (y/n): ").lower()
        if choice == 'y':
            test_single_question()
        else:
            break

    print("\nüëã K·∫øt th√∫c ch∆∞∆°ng tr√¨nh test!")