#!/usr/bin/env python3
"""
Test script cho Sentence-BERT + Classifier approach.

Script n√†y ki·ªÉm tra:
- Kh·∫£ nƒÉng ph√¢n lo·∫°i c√¢u h·ªèi v·∫≠t l√Ω v·ªõi Sentence-BERT
- T√≠nh ch√≠nh x√°c c·ªßa model
- So s√°nh v·ªõi rule-based approach

Author: Physics Problem Solving System Team
Version: 2.0.0
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from Flow_splitter_agent.init_model_llm import Check_Flow

def test_sentence_bert_classification():
    """
    Test function ƒë·ªÉ ki·ªÉm tra ph√¢n lo·∫°i c√¢u h·ªèi v·ªõi Sentence-BERT.
    """
    print("ü§ñ B·∫Øt ƒë·∫ßu test ph√¢n lo·∫°i c√¢u h·ªèi v·ªõi Sentence-BERT + Classifier...")
    print("=" * 70)
    
    # Test cases v·ªõi c√°c lo·∫°i c√¢u h·ªèi kh√°c nhau
    test_cases = [
        # THEORY questions
        {
            "question": "ƒê·ªãnh lu·∫≠t Newton th·ª© nh·∫•t l√† g√¨?",
            "expected": "THEORY",
            "description": "C√¢u h·ªèi l√Ω thuy·∫øt v·ªÅ ƒë·ªãnh lu·∫≠t"
        },
        {
            "question": "Gi·∫£i th√≠ch hi·ªán t∆∞·ª£ng kh√∫c x·∫° √°nh s√°ng",
            "expected": "THEORY", 
            "description": "C√¢u h·ªèi gi·∫£i th√≠ch hi·ªán t∆∞·ª£ng"
        },
        {
            "question": "ƒê·ªông nƒÉng l√† g√¨?",
            "expected": "THEORY",
            "description": "C√¢u h·ªèi v·ªÅ kh√°i ni·ªám"
        },
        {
            "question": "Th·∫ø nƒÉng tr·ªçng tr∆∞·ªùng l√† g√¨?",
            "expected": "THEORY",
            "description": "C√¢u h·ªèi v·ªÅ ƒë·ªãnh nghƒ©a"
        },
        
        # PRACTICE questions
        {
            "question": "T√≠nh l·ª±c t√°c d·ª•ng khi kh·ªëi l∆∞·ª£ng m=5kg v√† gia t·ªëc a=2m/s¬≤",
            "expected": "PRACTICE",
            "description": "B√†i t·∫≠p t√≠nh to√°n v·ªõi s·ªë li·ªáu"
        },
        {
            "question": "M·ªôt v·∫≠t c√≥ kh·ªëi l∆∞·ª£ng 10kg chuy·ªÉn ƒë·ªông v·ªõi v·∫≠n t·ªëc 5m/s. T√≠nh ƒë·ªông nƒÉng c·ªßa v·∫≠t",
            "expected": "PRACTICE",
            "description": "B√†i t·∫≠p t√≠nh ƒë·ªông nƒÉng"
        },
        {
            "question": "T√≠nh c√¥ng su·∫•t khi P=UI v·ªõi U=220V, I=2A",
            "expected": "PRACTICE",
            "description": "B√†i t·∫≠p t√≠nh c√¥ng su·∫•t"
        },
        {
            "question": "T√≠nh v·∫≠n t·ªëc khi s=100m, t=10s",
            "expected": "PRACTICE",
            "description": "B√†i t·∫≠p t√≠nh v·∫≠n t·ªëc"
        },
        
        # MULTIPLE_CHOICE questions
        {
            "question": "ƒê∆°n v·ªã c·ªßa l·ª±c l√†: A) kg B) m/s C) N D) J",
            "expected": "MULTIPLE_CHOICE",
            "description": "C√¢u h·ªèi tr·∫Øc nghi·ªám v·ªõi l·ª±a ch·ªçn"
        },
        {
            "question": "C√¥ng th·ª©c t√≠nh ƒë·ªông nƒÉng l√†: A) mgh B) 1/2mv¬≤ C) Ft D) ma",
            "expected": "MULTIPLE_CHOICE", 
            "description": "Tr·∫Øc nghi·ªám v·ªÅ c√¥ng th·ª©c"
        },
        {
            "question": "ƒê∆°n v·ªã c·ªßa c√¥ng su·∫•t l√†: A) W B) J C) N D) kg",
            "expected": "MULTIPLE_CHOICE",
            "description": "Tr·∫Øc nghi·ªám v·ªÅ ƒë∆°n v·ªã"
        },
        {
            "question": "ƒê·ªãnh lu·∫≠t Ohm c√≥ d·∫°ng: A) P=UI B) F=ma C) U=IR D) E=mc¬≤",
            "expected": "MULTIPLE_CHOICE",
            "description": "Tr·∫Øc nghi·ªám v·ªÅ ƒë·ªãnh lu·∫≠t"
        }
    ]
    
    correct_predictions = 0
    total_tests = len(test_cases)
    results_by_category = {"THEORY": {"correct": 0, "total": 0}, 
                          "PRACTICE": {"correct": 0, "total": 0}, 
                          "MULTIPLE_CHOICE": {"correct": 0, "total": 0}}
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìù Test {i}/{total_tests}: {test_case['description']}")
        print(f"C√¢u h·ªèi: {test_case['question']}")
        print(f"K·∫øt qu·∫£ mong ƒë·ª£i: {test_case['expected']}")
        
        try:
            # Kh·ªüi t·∫°o Check_Flow v·ªõi c√¢u h·ªèi
            classifier = Check_Flow(test_case['question'])
            
            # Th·ª±c hi·ªán ph√¢n lo·∫°i
            result = classifier.run()
            
            print(f"K·∫øt qu·∫£ th·ª±c t·∫ø: {result}")
            
            # C·∫≠p nh·∫≠t th·ªëng k√™ theo category
            expected_cat = test_case['expected']
            results_by_category[expected_cat]["total"] += 1
            
            # Ki·ªÉm tra k·∫øt qu·∫£
            if result == test_case['expected']:
                print("‚úÖ ƒê√öNG")
                correct_predictions += 1
                results_by_category[expected_cat]["correct"] += 1
            else:
                print("‚ùå SAI")
                
        except Exception as e:
            print(f"‚ùå L·ªñI: {str(e)}")
            results_by_category[test_case['expected']]["total"] += 1
    
    # T·ªïng k·∫øt
    print("\n" + "=" * 70)
    print("üìä K·∫æT QU·∫¢ T·ªîNG K·∫æT:")
    print(f"S·ªë test ƒë√∫ng: {correct_predictions}/{total_tests}")
    print(f"ƒê·ªô ch√≠nh x√°c t·ªïng th·ªÉ: {(correct_predictions/total_tests)*100:.1f}%")
    
    # Th·ªëng k√™ theo t·ª´ng lo·∫°i
    print("\nüìà TH·ªêNG K√ä THEO LO·∫†I:")
    for category, stats in results_by_category.items():
        if stats["total"] > 0:
            accuracy = (stats["correct"] / stats["total"]) * 100
            print(f"{category}: {stats['correct']}/{stats['total']} ({accuracy:.1f}%)")
    
    # ƒê√°nh gi√°
    if correct_predictions == total_tests:
        print("\nüéâ HO√ÄN H·∫¢O! T·∫§T C·∫¢ TEST CASES ƒê·ªÄU PASS!")
    elif correct_predictions >= total_tests * 0.9:
        print("\nüåü XU·∫§T S·∫ÆC! (>90% accuracy)")
    elif correct_predictions >= total_tests * 0.8:
        print("\n‚úÖ T·ªêT! (>80% accuracy)")
    elif correct_predictions >= total_tests * 0.7:
        print("\nüëç KH√Å T·ªêT! (>70% accuracy)")
    else:
        print("\n‚ö†Ô∏è C·∫¶N C·∫¢I THI·ªÜN! (<70% accuracy)")

def test_single_question():
    """
    Test v·ªõi m·ªôt c√¢u h·ªèi ƒë∆°n l·∫ª ƒë·ªÉ debug.
    """
    print("\nüîç Test c√¢u h·ªèi ƒë∆°n l·∫ª:")
    print("-" * 50)
    
    question = input("Nh·∫≠p c√¢u h·ªèi c·∫ßn test: ")
    
    try:
        classifier = Check_Flow(question)
        result = classifier.run()
        
        print(f"C√¢u h·ªèi: {question}")
        print(f"K·∫øt qu·∫£ ph√¢n lo·∫°i: {result}")
        
    except Exception as e:
        print(f"L·ªói: {str(e)}")

def test_edge_cases():
    """
    Test c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
    """
    print("\nüß™ Test c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát:")
    print("-" * 50)
    
    edge_cases = [
        "C√¢u h·ªèi r·ªóng",
        "",
        "123456789",
        "C√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn v·∫≠t l√Ω: H√¥m nay th·ªùi ti·∫øt th·∫ø n√†o?",
        "C√¢u h·ªèi d√†i: " + "Trong m·ªôt th√≠ nghi·ªám v·∫≠t l√Ω, " * 20,
        "C√¢u h·ªèi c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát: @#$%^&*()",
    ]
    
    for i, case in enumerate(edge_cases, 1):
        print(f"\nEdge case {i}: {case[:50]}...")
        try:
            classifier = Check_Flow(case)
            result = classifier.run()
            print(f"K·∫øt qu·∫£: {result}")
        except Exception as e:
            print(f"L·ªói: {str(e)}")

if __name__ == "__main__":
    print("üöÄ CH∆Ø∆†NG TR√åNH TEST SENTENCE-BERT CLASSIFIER")
    print("=" * 70)
    
    # Ch·∫°y test t·ª± ƒë·ªông
    test_sentence_bert_classification()
    
    # Test edge cases
    test_edge_cases()
    
    # T√πy ch·ªçn test th·ªß c√¥ng
    while True:
        choice = input("\nB·∫°n c√≥ mu·ªën test c√¢u h·ªèi ri√™ng l·∫ª? (y/n): ").lower()
        if choice == 'y':
            test_single_question()
        else:
            break
    
    print("\nüëã K·∫øt th√∫c ch∆∞∆°ng tr√¨nh test!")
